import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from pln_respuestas import generar_respuesta

# --- 1. Configuraci√≥n Inicial ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Token de tu bot
BOT_TOKEN = "7550990980:AAFB5oGvg4GC_zstquoXOgIUbqtop1rRKqI"

# --- 2. Comandos ---
async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Aqu√≠ tienes algunas cosas que puedo hacer:\n"
        "/respiracion - Te gu√≠o en un ejercicio de respiraci√≥n.\n"
        "/tipsestudio - Consejos para manejar el estr√©s acad√©mico.\n"
        "/psicologia - Informaci√≥n para contactar al departamento de psicolog√≠a.\n"
        "Tambi√©n puedes escribirme c√≥mo te sientes y ver√© c√≥mo puedo ayudarte."
    )

async def respiracion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üå¨Ô∏è **Ejercicio de Respiraci√≥n para Calmar la Ansiedad** üßò‚Äç‚ôÇÔ∏è\n\n"
        "Vamos a hacer una t√©cnica llamada **4-7-8**. Te ayudar√° a calmar tu mente y cuerpo. Empecemos:\n\n"
        "üîπ *Paso 1:* Inhala lentamente por la nariz mientras cuentas hasta **4**...\n"
        "üîπ *Paso 2:* Mant√©n el aire en tus pulmones mientras cuentas hasta **7**...\n"
        "üîπ *Paso 3:* Exhala suavemente por la boca mientras cuentas hasta **8**...\n\n"
        "Repite esto entre 3 y 5 veces. Cierra los ojos si lo deseas, y enf√≥cate solo en tu respiraci√≥n. üçÉ\n\n"
        "üó®Ô∏è *¬øNo te funcion√≥?* Puedes seguir charlando conmigo para ver si puedo ayudarte, "
        "o incluso usar el comando /cita para agendar una sesi√≥n personalizada. ü§ù",
        parse_mode="Markdown"
    )



async def tips_estudio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìò **Tips para Manejar el Estr√©s Acad√©mico**\n\n"
        "Aqu√≠ tienes algunas recomendaciones que pueden ayudarte a estudiar con m√°s calma y eficacia:\n\n"
        "üîπ *Organiza tu tiempo* con un horario realista y flexible.\n"
        "üîπ *Toma descansos* regulares (5 a 10 minutos cada hora).\n"
        "üîπ *Duerme bien* y mant√©n una alimentaci√≥n balanceada.\n"
        "üîπ *Habla con tus profesores o compa√±eros* si necesitas apoyo.\n\n"
        "üí° *¬øTe sigues sintiendo abrumado?* Puedes seguir conversando conmigo o usar el comando /cita para agendar una charla personalizada. ü§ù",
        parse_mode="Markdown"
    )


async def psicologia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üß† **Apoyo Profesional - Psicolog√≠a Escolar**\n\n"
        "Si est√°s pasando por un momento dif√≠cil o necesitas hablar con alguien, el Departamento de Psicolog√≠a Escolar est√° disponible para ti. Aqu√≠ tienes sus datos de contacto:\n\n"
        "üìû **Tel√©fono:** +52 833 123 4567\n"
        "üìß **Correo Electr√≥nico:** psicologia@tuinstituto.edu.mx\n"
        "üïê **Horario de atenci√≥n:** Lunes a Viernes, 8:00 a.m. - 3:00 p.m.\n"
        "üìç **Ubicaci√≥n:** Edificio C, planta alta (ver mapa: [Ubicaci√≥n en Google Maps](https://maps.google.com))\n"
        "üåê **Sitio web:** [Visita la p√°gina oficial](https://www.tuinstituto.edu.mx/psicologia)\n\n"
        "Recuerda: pedir ayuda tambi√©n es una forma de cuidar de ti. ü§ù",
        parse_mode="Markdown"
    )


# --- 3. PLN ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mensaje = update.message.text
    respuesta = generar_respuesta(mensaje)
    await update.message.reply_text(respuesta)

# --- 4. Cita (ConversationHandler) ---
ELEGIR_DIA, ELEGIR_HORA, ELEGIR_TEMA = range(3)

async def iniciar_cita(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("¬øQu√© d√≠a te gustar√≠a agendar tu cita? (ej. lunes, 20 de julio)")
    return ELEGIR_DIA

async def recibir_dia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["dia"] = update.message.text
    await update.message.reply_text("¬øA qu√© hora deseas tu cita? (ej. 10:00 AM)")
    return ELEGIR_HORA

async def recibir_hora(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["hora"] = update.message.text
    await update.message.reply_text("¬øCu√°l es el motivo de tu cita?")
    return ELEGIR_TEMA

async def recibir_tema(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["tema"] = update.message.text
    dia = context.user_data["dia"]
    hora = context.user_data["hora"]
    tema = context.user_data["tema"]
    await update.message.reply_text(
        f"Tu cita ha sido registrada:\nüìÖ D√≠a: {dia}\nüïê Hora: {hora}\nüìù Motivo: {tema}\n\n"
        "¬°Gracias! Te esperamos. üòä"
    )
    return ConversationHandler.END

async def cancelar_cita(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Has cancelado el proceso de agendar cita.")
    return ConversationHandler.END

# --- 5. Main ---
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # Comandos
    application.add_handler(CommandHandler("ayuda", ayuda))
    application.add_handler(CommandHandler("respiracion", respiracion))
    application.add_handler(CommandHandler("tipsestudio", tips_estudio))
    application.add_handler(CommandHandler("psicologia", psicologia))

    # Conversaci√≥n para citas
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("cita", iniciar_cita)],
        states={
            ELEGIR_DIA: [MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_dia)],
            ELEGIR_HORA: [MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_hora)],
            ELEGIR_TEMA: [MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_tema)],
        },
        fallbacks=[CommandHandler("cancelar", cancelar_cita)],
    )
    application.add_handler(conv_handler)

    # Mensajes normales
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Bot iniciado correctamente.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()  