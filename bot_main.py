import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# --- 1. Configuraci√≥n Inicial ---
# Configura el log para ver lo que hace tu bot (opcional pero muy √∫til para depurar)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Reemplaza 'TU_BOT_TOKEN' con el token que obtuviste de BotFather
BOT_TOKEN = "TU_BOT_TOKEN"

# --- 2. Funciones de Manejo de Comandos y Mensajes ---

# Comando /start: Saludo inicial y bienvenida
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"¬°Hola, {user.mention_html()}! üëã Soy tu compa√±ero de salud mental en la universidad. "
        "Estoy aqu√≠ para ayudarte si te sientes estresado o ansioso. "
        "Puedes preguntarme sobre t√©cnicas de relajaci√≥n, o si lo necesitas, "
        "conectarte con el departamento de psicolog√≠a. "
        "Usa /ayuda para ver qu√© m√°s puedo hacer por ti."
    )

# Comando /ayuda: Muestra las opciones disponibles
async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Aqu√≠ tienes algunas cosas que puedo hacer:\n"
        "/respiracion - Te gu√≠o en un ejercicio de respiraci√≥n.\n"
        "/tipsestudio - Consejos para manejar el estr√©s acad√©mico.\n"
        "/psicologia - Informaci√≥n para contactar al departamento de psicolog√≠a.\n"
        "Tambi√©n puedes escribirme c√≥mo te sientes y ver√© c√≥mo puedo ayudarte."
    )

# Comando /respiracion: Gu√≠a un ejercicio de respiraci√≥n
async def respiracion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "¬°Claro! Vamos a hacer un ejercicio de respiraci√≥n profunda. üßò‚Äç‚ôÄÔ∏è\n"
        "1. Inhala lentamente por la nariz contando hasta 4.\n"
        "2. Sost√©n la respiraci√≥n contando hasta 7.\n"
        "3. Exhala lentamente por la boca contando hasta 8.\n"
        "Repite esto 3-5 veces. Conc√©ntrate solo en tu respiraci√≥n."
    )

# Comando /tipsestudio: Ofrece consejos para el estr√©s acad√©mico
async def tips_estudio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Aqu√≠ tienes algunos tips para manejar el estr√©s acad√©mico: üìö\n"
        "‚Ä¢ Organiza tu tiempo con un horario.\n"
        "‚Ä¢ Toma descansos regulares (5-10 minutos cada hora).\n"
        "‚Ä¢ Duerme lo suficiente y come bien.\n"
        "‚Ä¢ ¬°No dudes en pedir ayuda a tus profesores o compa√±eros si la necesitas!"
    )

# Comando /psicologia: Informacion del departamento de psicologia
async def psicologia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Si necesitas apoyo profesional, el Departamento de Psicolog√≠a Escolar est√° para ayudarte. üìû\n"
        "**Tel√©fono:** [Tu n√∫mero de tel√©fono del departamento]\n"
        "**Correo Electr√≥nico:** [Tu correo electr√≥nico del departamento]\n"
        "**Horario:** Lunes a Viernes, [Tu horario de atenci√≥n]\n"
        "**Ubicaci√≥n:** [Tu ubicaci√≥n o enlace a un mapa]\n"
        "Tambi√©n puedes visitar su p√°gina web para m√°s informaci√≥n: [Tu enlace a la web del departamento]\n"
        "Recuerda, ¬°buscar ayuda es un paso muy valiente y positivo para tu bienestar!"
    )

# Manejador de mensajes de texto: Respuesta a palabras clave (ejemplo simple)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.lower() # Convertir a min√∫sculas para facilitar la detecci√≥n

    if "estr√©s" in text or "ansiedad" in text or "abrumado" in text:
        await update.message.reply_text(
            "Entiendo que te sientas as√≠. Es normal experimentar estr√©s o ansiedad. "
            "¬øTe gustar√≠a que te ofrezca un ejercicio de /respiracion, "
            "o quiz√°s algunos /tipsestudio? "
            "Si sientes que necesitas hablar con alguien, puedes consultar el comando /psicologia."
        )
    elif "gracias" in text or "gracias!" in text:
        await update.message.reply_text("¬°De nada! Estoy aqu√≠ para ayudarte cuando lo necesites. üòä")
    else:
        # Respuesta por defecto si no reconoce la intenci√≥n
        await update.message.reply_text(
            "Lo siento, no estoy seguro de c√≥mo ayudarte con eso. "
            "Puedes usar /ayuda para ver las opciones que tengo disponibles."
        )

# --- 3. Funci√≥n Principal para Ejecutar el Bot ---
def main() -> None:
    # Crea la aplicaci√≥n del bot y p√°sale tu token
    application = Application.builder().token(BOT_TOKEN).build()

    # Registra los manejadores de comandos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ayuda", ayuda))
    application.add_handler(CommandHandler("respiracion", respiracion))
    application.add_handler(CommandHandler("tipsestudio", tips_estudio))
    application.add_handler(CommandHandler("psicologia", psicologia))

    # Registra un manejador para mensajes de texto (no comandos)
    # filters.TEXT & ~filters.COMMAND asegura que solo procese texto que no sea un comando
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Inicia el polling (el bot estar√° escuchando nuevos mensajes)
    logger.info("Bot started polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# if __name__ == "__main__":
#     from telegram.ext import ContextTypes # Importa aqu√≠ para evitar dependencia circular
#     main()